# Guide (user-friendly):
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

[build-system]
# Choosing a build backend:
# https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend
# A list of packages that are needed to build the project package:
requires = ["setuptools"]  # REQUIRED if [build-system] table is used
# The name of the Python object that frontends will use to perform the build:
build-backend = "setuptools.build_meta"

[project]
# This is the name of the project. The first time you publish this
# package, this name will be registered for you. Restrictions:
# https://packaging.python.org/specifications/core-metadata/#name
name = "analysis-app"

# Versions should comply with PEP 440
version = "0.0.1"

# This is a one-line description of what the project does:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "Gradio App for Temperature Anyalysis"

# This is an optional longer description of the project.
# Often, the same as the README, corresponds to:
# https://packaging.python.org/specifications/core-metadata/#description-optional
readme = "README.md"

# Specify which Python versions are supported. 'pip install' will check this
# and refuse to install the project if the version does not match:
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">=3.12"

# Names of the persons or organization who originally authored the project.
authors = [
  {name = "Matthias Taeschner", email = "matthias.taeschner@uni-leipzig.de" }
]

# Names of the persons or organization who currently maintain the project.
maintainers = [
  {name = "Matthias Taeschner", email = "matthias.taeschner@uni-leipzig.de" }
]

# Configurations for the tools used in project
## Configurations for ruff
[tool.ruff]
# See https://docs.astral.sh/ruff/settings/#top-level for details
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".gradio",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 110
indent-width = 4
# Target Python version
target-version = "py313"
# Enumerate all fixed violations.
show-fixes = true
# Group violations by containing file.
output-format = "grouped"

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/settings/#lint for details
# See https://docs.astral.sh/ruff/rules/ for rules
select = [
    # pycodestyle
    "E",
    # pydocstyle
    "D",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = [
    # ignore missing docstrings in public module, class, package, magic method, nested class, init
    "D100", "D101", "D104", "D105", "D106", "D107",
    # ignore blank line before class docstring and summary on second line
    "D203", "D213",
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
# Do not try to fix flake8-bugbear violations, i.e., likely bugs and design problems in code
unfixable = ["B"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# ignore docstrings in test classes
"tests/*.py" = ["D"]

[tool.ruff.format]
# See https://docs.astral.sh/ruff/settings/#format for details
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings.
docstring-code-format = true
# Set the line length limit used when formatting code snippets in docstrings.
docstring-code-line-length = "dynamic"

## Configurations for coverage
# See https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
source = ["app"]

[tool.coverage.report]
omit = [
  "*/__init__.py",
  "app/main.py",
  "*/tests/*"
]
